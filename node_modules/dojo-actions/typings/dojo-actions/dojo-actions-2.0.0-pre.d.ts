declare module 'dojo-actions/createAction' {
	/**
	 * The actions module for Dojo 2
	 * @module dojo-actions/actions
	 */
	import { ComposeFactory } from 'dojo-compose/compose';
	import Promise from 'dojo-core/Promise';
	export type ActionLabel = string | symbol;
	export interface ActionPromise<T, O extends ActionOptions<any>> extends Promise<T> {
	    /**
	     * Performs an undo of the action. Returns another ActionPromise.  If the action
	     * does not handle //
	     */
	    undo(): ActionPromise<T, O>;
	    redo(options?: O): ActionPromise<T, O>;
	}
	/**
	 * Options that are passed to an action.do or action.redo method
	 * @template T The type of the target for the action
	 */
	export interface ActionOptions<T> {
	    /**
	     * The target of the action
	     */
	    target?: T;
	}
	/**
	 * Type base interface for the state of an action, intended to be extended
	 */
	export interface ActionState {
	    [name: string]: any;
	}
	/**
	 * An action encapsulates do, undo and redo functionality
	 * @template T The type that the action's promise will resolve to
	 * @template O (extends ActionOptions) the type of the options to be passed the do or redo function
	 * @template S (extends ActionState) the type of state for the action
	 */
	export interface Action<T, O extends ActionOptions<T>, S extends ActionState> {
	    /**
	     * The action type
	     */
	    type: ActionLabel;
	    /**
	     * Invoke the action
	     * @param   options Optional argument providing any options to the action
	     * @returns         a Promise which is also decorated with redo and undo methods
	     */
	    do(options?: O): ActionPromise<T, O>;
	    /**
	     * Determine if the action is currently enabled.
	     */
	    enabled: boolean;
	    /**
	     * A hash that contains any state for the action to facilitate items like "undo"
	     */
	    state?: S;
	    /**
	     * Disable the action
	     * @returns A promise the resolves when the action is disabled
	     */
	    disable(): Promise<boolean>;
	    /**
	     * Enable the promise
	     * @returns A promise that resolves when the action is enabled
	     */
	    enable(): Promise<boolean>;
	    /**
	     * Destory the action
	     * @returns A promise that resolves when the action is destoryed
	     */
	    destroy(): Promise<boolean>;
	}
	/**
	 * Options that are passed when creating a new action
	 * @template T The type that the action's promise will resolve to
	 * @template O (extends ActionOptions) the type of the options to be passed the do or redo function
	 * @template S (extends ActionState) the type of state for the action
	 */
	export interface ActionFactoryOptions<T, O extends ActionOptions<any>, S extends ActionState> {
	    type: ActionLabel;
	    do: (options?: O) => T | Promise<T>;
	    state?: S;
	    undo?: () => T | Promise<T>;
	    redo?: (options?: O) => T | Promise<T>;
	    enabler?: (enabled: boolean) => boolean | Promise<boolean>;
	}
	/**
	 * A factory that creates a new action
	 */
	export interface ActionFactory extends ComposeFactory<Action<any, any, any>, ActionFactoryOptions<any, any, any>> {
	    /**
	     * A factory that creates a new action
	     * @param   options The options to specify the action.
	     * @returns         The action instance
	     * @template T The type that the action's promise will resolve to
	     * @template O (extends ActionOptions) the type of the options to be passed the do or redo function
	     * @template S (extends ActionState) the type of state for the action
	     */
	    <T, O extends ActionOptions<T>, S extends ActionState>(options: ActionFactoryOptions<T, O, S>): Action<T, O, S>;
	    disable<T, O extends ActionOptions<T>, S extends ActionState>(action: ActionLabel | Action<T, O, S>): Promise<boolean>;
	    enable<T, O extends ActionOptions<T>, S extends ActionState>(action: ActionLabel | Action<T, O, S>): Promise<boolean>;
	    destroy<T, O extends ActionOptions<T>, S extends ActionState>(action: ActionLabel | Action<T, O, S>): Promise<boolean>;
	} const createAction: ActionFactory;
	/**
	 * Returns an action based on the supplied label
	 * @param    type The type of action to be retrieved
	 * @returns       The action (or undefined)
	 * @template T    The type that the action's promise will resolve to
	 * @template O    (extends ActionOptions) the type of the options to be passed the do or redo function
	 * @template S    (extends ActionState) the type of state for the action
	 */
	export function byType<T, O extends ActionOptions<any>, S extends ActionState>(type: ActionLabel): Action<T, O, S>;
	/**
	 * Type guard to determine if the value is an Action
	 * @param    value The value to be checked
	 * @returns        Returns `true` if is an action, otherwise `false`
	 */
	export function isAction(value: any): value is Action<any, any, any>;
	/**
	 * Returns if the current action is enabled or not
	 * @param   action The action label or an action instance
	 * @returns        Returns true if enabled or false if disabled
	 * @template T     The type that the action's promise will resolve to
	 * @template O     (extends ActionOptions) the type of the options to be passed the do or redo function
	 * @template S     (extends ActionState) the type of state for the action
	 */
	export function isEnabled<T, O extends ActionOptions<any>, S extends ActionState>(action: ActionLabel | Action<T, O, S>): boolean;
	export default createAction;

}
