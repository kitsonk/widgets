(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './queue'], factory);
    }
})(function (require, exports) {
    "use strict";
    var queue_1 = require('./queue');
    function getQueueHandle(item) {
        return {
            destroy: function () {
                this.destroy = function () { };
                item.isActive = false;
                item.callback = null;
            }
        };
    }
    var Scheduler = (function () {
        function Scheduler(kwArgs) {
            this.deferWhileProcessing = (kwArgs && 'deferWhileProcessing' in kwArgs) ? kwArgs.deferWhileProcessing : true;
            this.queueFunction = (kwArgs && kwArgs.queueFunction) ? kwArgs.queueFunction : queue_1.queueTask;
            this._boundDispatch = this._dispatch.bind(this);
            this._isProcessing = false;
            this._queue = [];
        }
        Scheduler.prototype._defer = function (callback) {
            var item = {
                isActive: true,
                callback: callback
            };
            if (!this._deferred) {
                this._deferred = [];
            }
            this._deferred.push(item);
            return getQueueHandle(item);
        };
        Scheduler.prototype._dispatch = function () {
            this._isProcessing = true;
            this._task.destroy();
            this._task = null;
            var queue = this._queue;
            var item;
            while (item = queue.shift()) {
                if (item.isActive) {
                    item.callback();
                }
            }
            this._isProcessing = false;
            var deferred = this._deferred;
            if (deferred && deferred.length) {
                this._deferred = null;
                var item_1;
                while (item_1 = deferred.shift()) {
                    this._schedule(item_1);
                }
            }
        };
        Scheduler.prototype._schedule = function (item) {
            if (!this._task) {
                this._task = this.queueFunction(this._boundDispatch);
            }
            this._queue.push(item);
        };
        Scheduler.prototype.schedule = function (callback) {
            if (this._isProcessing && this.deferWhileProcessing) {
                return this._defer(callback);
            }
            var item = {
                isActive: true,
                callback: callback
            };
            this._schedule(item);
            return getQueueHandle(item);
        };
        return Scheduler;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Scheduler;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NoZWR1bGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1NjaGVkdWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7SUFDQSxzQkFBcUMsU0FBUyxDQUFDLENBQUE7SUFFL0Msd0JBQXdCLElBQWU7UUFDdEMsTUFBTSxDQUFDO1lBQ04sT0FBTyxFQUFFO2dCQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsY0FBYSxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUN0QixDQUFDO1NBQ0QsQ0FBQztJQUNILENBQUM7SUFPRDtRQXFFQyxtQkFBWSxNQUFlO1lBQzFCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLE1BQU0sSUFBSSxzQkFBc0IsSUFBSSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1lBQzlHLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxhQUFhLEdBQUcsaUJBQVMsQ0FBQztZQUV6RixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLENBQUM7UUF6RFMsMEJBQU0sR0FBaEIsVUFBaUIsUUFBa0M7WUFDbEQsSUFBTSxJQUFJLEdBQWM7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFFBQVEsRUFBRSxRQUFRO2FBQ2xCLENBQUM7WUFFRixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUNyQixDQUFDO1lBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBRVMsNkJBQVMsR0FBbkI7WUFDQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBRWxCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDMUIsSUFBSSxJQUFlLENBQUM7WUFFcEIsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2pCLENBQUM7WUFDRixDQUFDO1lBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFFM0IsSUFBSSxRQUFRLEdBQWdCLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDM0MsRUFBRSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFFdEIsSUFBSSxNQUFlLENBQUM7Z0JBQ3BCLE9BQU8sTUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO29CQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQUksQ0FBQyxDQUFDO2dCQUN0QixDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7UUFFUyw2QkFBUyxHQUFuQixVQUFvQixJQUFlO1lBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdEQsQ0FBQztZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUM7UUFXRCw0QkFBUSxHQUFSLFVBQVMsUUFBa0M7WUFDMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QixDQUFDO1lBRUQsSUFBTSxJQUFJLEdBQWM7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFFBQVEsRUFBRSxRQUFRO2FBQ2xCLENBQUM7WUFFRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXJCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUNGLGdCQUFDO0lBQUQsQ0FBQyxBQTVGRCxJQTRGQztJQTVGRDsrQkE0RkMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhbmRsZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBRdWV1ZUl0ZW0sIHF1ZXVlVGFzayB9IGZyb20gJy4vcXVldWUnO1xuXG5mdW5jdGlvbiBnZXRRdWV1ZUhhbmRsZShpdGVtOiBRdWV1ZUl0ZW0pOiBIYW5kbGUge1xuXHRyZXR1cm4ge1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0aXRlbS5pc0FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0aXRlbS5jYWxsYmFjayA9IG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEt3QXJncyB7XG5cdGRlZmVyV2hpbGVQcm9jZXNzaW5nPzogYm9vbGVhbjtcblx0cXVldWVGdW5jdGlvbj86IChjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID0+IEhhbmRsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZWR1bGVyIHtcblx0cHJvdGVjdGVkIF9ib3VuZERpc3BhdGNoOiAoKSA9PiB2b2lkO1xuXHRwcm90ZWN0ZWQgX2RlZmVycmVkOiBRdWV1ZUl0ZW1bXTtcblx0cHJvdGVjdGVkIF9pc1Byb2Nlc3Npbmc6IGJvb2xlYW47XG5cdHByb3RlY3RlZCBfcXVldWU6IFF1ZXVlSXRlbVtdO1xuXHRwcm90ZWN0ZWQgX3Rhc2s6IEhhbmRsZTtcblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFueSBjYWxsYmFja3MgcmVnaXN0ZXJlZCBkdXJpbmcgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBjdXJyZW50IGJhdGNoIChgZmFsc2VgKVxuXHQgKiBvciBkZWZlcnJlZCB1bnRpbCB0aGUgbmV4dCBiYXRjaCAoYHRydWVgLCBkZWZhdWx0KS5cblx0ICovXG5cdGRlZmVyV2hpbGVQcm9jZXNzaW5nOiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBBbGxvd3MgdXNlcnMgdG8gc3BlY2lmeSB0aGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzY2hlZHVsZSBjYWxsYmFja3MuXG5cdCAqIElmIG5vIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGBxdWV1ZVRhc2tgIHdpbGwgYmUgdXNlZC5cblx0ICovXG5cdHF1ZXVlRnVuY3Rpb246IChjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID0+IEhhbmRsZTtcblxuXHRwcm90ZWN0ZWQgX2RlZmVyKGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBIYW5kbGUge1xuXHRcdGNvbnN0IGl0ZW06IFF1ZXVlSXRlbSA9IHtcblx0XHRcdGlzQWN0aXZlOiB0cnVlLFxuXHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrXG5cdFx0fTtcblxuXHRcdGlmICghdGhpcy5fZGVmZXJyZWQpIHtcblx0XHRcdHRoaXMuX2RlZmVycmVkID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGVmZXJyZWQucHVzaChpdGVtKTtcblxuXHRcdHJldHVybiBnZXRRdWV1ZUhhbmRsZShpdGVtKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZGlzcGF0Y2goKTogdm9pZCB7XG5cdFx0dGhpcy5faXNQcm9jZXNzaW5nID0gdHJ1ZTtcblx0XHR0aGlzLl90YXNrLmRlc3Ryb3koKTtcblx0XHR0aGlzLl90YXNrID0gbnVsbDtcblxuXHRcdGNvbnN0IHF1ZXVlID0gdGhpcy5fcXVldWU7XG5cdFx0bGV0IGl0ZW06IFF1ZXVlSXRlbTtcblxuXHRcdHdoaWxlIChpdGVtID0gcXVldWUuc2hpZnQoKSkge1xuXHRcdFx0aWYgKGl0ZW0uaXNBY3RpdmUpIHtcblx0XHRcdFx0aXRlbS5jYWxsYmFjaygpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX2lzUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG5cdFx0bGV0IGRlZmVycmVkOiBRdWV1ZUl0ZW1bXSA9IHRoaXMuX2RlZmVycmVkO1xuXHRcdGlmIChkZWZlcnJlZCAmJiBkZWZlcnJlZC5sZW5ndGgpIHtcblx0XHRcdHRoaXMuX2RlZmVycmVkID0gbnVsbDtcblxuXHRcdFx0bGV0IGl0ZW06IFF1ZXVlSXRlbTtcblx0XHRcdHdoaWxlIChpdGVtID0gZGVmZXJyZWQuc2hpZnQoKSkge1xuXHRcdFx0XHR0aGlzLl9zY2hlZHVsZShpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3NjaGVkdWxlKGl0ZW06IFF1ZXVlSXRlbSk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5fdGFzaykge1xuXHRcdFx0dGhpcy5fdGFzayA9IHRoaXMucXVldWVGdW5jdGlvbih0aGlzLl9ib3VuZERpc3BhdGNoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9xdWV1ZS5wdXNoKGl0ZW0pO1xuXHR9XG5cblx0Y29uc3RydWN0b3Ioa3dBcmdzPzogS3dBcmdzKSB7XG5cdFx0dGhpcy5kZWZlcldoaWxlUHJvY2Vzc2luZyA9IChrd0FyZ3MgJiYgJ2RlZmVyV2hpbGVQcm9jZXNzaW5nJyBpbiBrd0FyZ3MpID8ga3dBcmdzLmRlZmVyV2hpbGVQcm9jZXNzaW5nIDogdHJ1ZTtcblx0XHR0aGlzLnF1ZXVlRnVuY3Rpb24gPSAoa3dBcmdzICYmIGt3QXJncy5xdWV1ZUZ1bmN0aW9uKSA/IGt3QXJncy5xdWV1ZUZ1bmN0aW9uIDogcXVldWVUYXNrO1xuXG5cdFx0dGhpcy5fYm91bmREaXNwYXRjaCA9IHRoaXMuX2Rpc3BhdGNoLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5faXNQcm9jZXNzaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5fcXVldWUgPSBbXTtcblx0fVxuXG5cdHNjaGVkdWxlKGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBIYW5kbGUge1xuXHRcdGlmICh0aGlzLl9pc1Byb2Nlc3NpbmcgJiYgdGhpcy5kZWZlcldoaWxlUHJvY2Vzc2luZykge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2RlZmVyKGNhbGxiYWNrKTtcblx0XHR9XG5cblx0XHRjb25zdCBpdGVtOiBRdWV1ZUl0ZW0gPSB7XG5cdFx0XHRpc0FjdGl2ZTogdHJ1ZSxcblx0XHRcdGNhbGxiYWNrOiBjYWxsYmFja1xuXHRcdH07XG5cblx0XHR0aGlzLl9zY2hlZHVsZShpdGVtKTtcblxuXHRcdHJldHVybiBnZXRRdWV1ZUhhbmRsZShpdGVtKTtcblx0fVxufVxuIl19