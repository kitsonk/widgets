(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './lang'], factory);
    }
})(function (require, exports) {
    "use strict";
    var lang_1 = require('./lang');
    /**
     * Parses a query string, returning a ParamList object.
     */
    function parseQueryString(input) {
        var query = {};
        for (var _i = 0, _a = input.split('&'); _i < _a.length; _i++) {
            var entry = _a[_i];
            var indexOfFirstEquals = entry.indexOf('=');
            var key = void 0;
            var value = void 0;
            if (indexOfFirstEquals >= 0) {
                key = entry.slice(0, indexOfFirstEquals);
                value = entry.slice(indexOfFirstEquals + 1);
            }
            else {
                key = entry;
            }
            key = key ? decodeURIComponent(key) : '';
            value = value ? decodeURIComponent(value) : '';
            if (key in query) {
                query[key].push(value);
            }
            else {
                query[key] = [value];
            }
        }
        return query;
    }
    /**
     * Represents a set of URL query search parameters.
     */
    var UrlSearchParams = (function () {
        /**
         * Constructs a new UrlSearchParams from a query string, an object of parameters and values, or another
         * UrlSearchParams.
         */
        function UrlSearchParams(input) {
            var list;
            if (input instanceof UrlSearchParams) {
                // Copy the incoming UrlSearchParam's internal list
                list = lang_1.duplicate(input._list);
            }
            else if (typeof input === 'object') {
                // Copy the incoming object, assuming its property values are either arrays or strings
                list = {};
                for (var key in input) {
                    var value = input[key];
                    if (Array.isArray(value)) {
                        list[key] = value.length ? value.slice() : [''];
                    }
                    else if (value == null) {
                        list[key] = [''];
                    }
                    else {
                        list[key] = [value];
                    }
                }
            }
            else if (typeof input === 'string') {
                // Parse the incoming string as a query string
                list = parseQueryString(input);
            }
            else {
                list = {};
            }
            Object.defineProperty(this, '_list', { value: list });
        }
        /**
         * Appends a new value to the set of values for a key.
         * @param key The key to add a value for
         * @param value The value to add
         */
        UrlSearchParams.prototype.append = function (key, value) {
            if (!this.has(key)) {
                this.set(key, value);
            }
            else {
                this._list[key].push(value);
            }
        };
        /**
         * Deletes all values for a key.
         * @param key The key whose values are to be removed
         */
        UrlSearchParams.prototype.delete = function (key) {
            // Set to undefined rather than deleting the key, for better consistency across browsers.
            // If a deleted key is re-added, most browsers put it at the end of iteration order, but IE maintains
            // its original position.  This approach maintains the original position everywhere.
            this._list[key] = undefined;
        };
        /**
         * Returns the first value associated with a key.
         * @param key The key to return the first value for
         * @return The first string value for the key
         */
        UrlSearchParams.prototype.get = function (key) {
            if (!this.has(key)) {
                return null;
            }
            return this._list[key][0];
        };
        /**
         * Returns all the values associated with a key.
         * @param key The key to return all values for
         * @return An array of strings containing all values for the key
         */
        UrlSearchParams.prototype.getAll = function (key) {
            if (!this.has(key)) {
                return null;
            }
            return this._list[key];
        };
        /**
         * Returns true if a key has been set to any value, false otherwise.
         * @param key The key to test for existence
         * @return A boolean indicating if the key has been set
         */
        UrlSearchParams.prototype.has = function (key) {
            return Array.isArray(this._list[key]);
        };
        /**
         * Returns an array of all keys which have been set.
         * @return An array of strings containing all keys set in the UrlSearchParams instance
         */
        UrlSearchParams.prototype.keys = function () {
            var keys = [];
            for (var key in this._list) {
                if (this.has(key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
        /**
         * Sets the value associated with a key.
         * @param key The key to set the value of
         */
        UrlSearchParams.prototype.set = function (key, value) {
            this._list[key] = [value];
        };
        /**
         * Returns this object's data as an encoded query string.
         * @return A string in application/x-www-form-urlencoded format containing all of the set keys/values
         */
        UrlSearchParams.prototype.toString = function () {
            var query = [];
            for (var key in this._list) {
                if (!this.has(key)) {
                    continue;
                }
                var values = this._list[key];
                var encodedKey = encodeURIComponent(key);
                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                    var value = values_1[_i];
                    query.push(encodedKey + (value ? ('=' + encodeURIComponent(value)) : ''));
                }
            }
            return query.join('&');
        };
        return UrlSearchParams;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = UrlSearchParams;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXJsU2VhcmNoUGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1VybFNlYXJjaFBhcmFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7SUFDQSxxQkFBMEIsUUFBUSxDQUFDLENBQUE7SUFPbkM7O09BRUc7SUFDSCwwQkFBMEIsS0FBYTtRQUN0QyxJQUFNLEtBQUssR0FBbUIsRUFBRSxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxDQUFnQixVQUFnQixFQUFoQixLQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQWhCLGNBQWdCLEVBQWhCLElBQWdCLENBQUM7WUFBaEMsSUFBTSxLQUFLLFNBQUE7WUFDZixJQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUMsSUFBSSxHQUFHLFNBQVEsQ0FBQztZQUNoQixJQUFJLEtBQUssU0FBUSxDQUFDO1lBRWxCLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN6QyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3QyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ1AsR0FBRyxHQUFHLEtBQUssQ0FBQztZQUNiLENBQUM7WUFFRCxHQUFHLEdBQUcsR0FBRyxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN6QyxLQUFLLEdBQUcsS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUUvQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFD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QUM7WUFFM0IsR0FBRyxDQUFDLENBQUMsSUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLFFBQVEsQ0FBQztnQkFDVixDQUFDO2dCQUVELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQy9CLElBQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQyxHQUFHLENBQUMsQ0FBZ0IsVUFBTSxFQUFOLGlCQUFNLEVBQU4sb0JBQU0sRUFBTixJQUFNLENBQUM7b0JBQXRCLElBQU0sS0FBSyxlQUFBO29CQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDMUU7WUFDRixDQUFDO1lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQztRQUNGLHNCQUFDO0lBQUQsQ0FBQyxBQXJKRCxJQXFKQztJQXJKRDtxQ0FxSkMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc2ggfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZHVwbGljYXRlIH0gZnJvbSAnLi9sYW5nJztcblxuLyoqXG4gKiBPYmplY3Qgd2l0aCBzdHJpbmcga2V5cyBhbmQgc3RyaW5nIG9yIHN0cmluZyBhcnJheSB2YWx1ZXMgdGhhdCBkZXNjcmliZXMgYSBxdWVyeSBzdHJpbmcuXG4gKi9cbmV4cG9ydCB0eXBlIFBhcmFtTGlzdCA9IEhhc2g8c3RyaW5nIHwgc3RyaW5nW10+O1xuXG4vKipcbiAqIFBhcnNlcyBhIHF1ZXJ5IHN0cmluZywgcmV0dXJuaW5nIGEgUGFyYW1MaXN0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhpbnB1dDogc3RyaW5nKTogUGFyYW1MaXN0IHtcblx0Y29uc3QgcXVlcnk6IEhhc2g8c3RyaW5nW10+ID0ge307XG5cdGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQuc3BsaXQoJyYnKSkge1xuXHRcdGNvbnN0IGluZGV4T2ZGaXJzdEVxdWFscyA9IGVudHJ5LmluZGV4T2YoJz0nKTtcblx0XHRsZXQga2V5OiBzdHJpbmc7XG5cdFx0bGV0IHZhbHVlOiBzdHJpbmc7XG5cblx0XHRpZiAoaW5kZXhPZkZpcnN0RXF1YWxzID49IDApIHtcblx0XHRcdGtleSA9IGVudHJ5LnNsaWNlKDAsIGluZGV4T2ZGaXJzdEVxdWFscyk7XG5cdFx0XHR2YWx1ZSA9IGVudHJ5LnNsaWNlKGluZGV4T2ZGaXJzdEVxdWFscyArIDEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRrZXkgPSBlbnRyeTtcblx0XHR9XG5cblx0XHRrZXkgPSBrZXkgPyBkZWNvZGVVUklDb21wb25lbnQoa2V5KSA6ICcnO1xuXHRcdHZhbHVlID0gdmFsdWUgPyBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpIDogJyc7XG5cblx0XHRpZiAoa2V5IGluIHF1ZXJ5KSB7XG5cdFx0XHRxdWVyeVtrZXldLnB1c2godmFsdWUpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHF1ZXJ5W2tleV0gPSBbIHZhbHVlIF07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBxdWVyeTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2V0IG9mIFVSTCBxdWVyeSBzZWFyY2ggcGFyYW1ldGVycy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXJsU2VhcmNoUGFyYW1zIHtcblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgVXJsU2VhcmNoUGFyYW1zIGZyb20gYSBxdWVyeSBzdHJpbmcsIGFuIG9iamVjdCBvZiBwYXJhbWV0ZXJzIGFuZCB2YWx1ZXMsIG9yIGFub3RoZXJcblx0ICogVXJsU2VhcmNoUGFyYW1zLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoaW5wdXQ/OiBzdHJpbmcgfCBQYXJhbUxpc3QgfCBVcmxTZWFyY2hQYXJhbXMpIHtcblx0XHRsZXQgbGlzdDogUGFyYW1MaXN0O1xuXG5cdFx0aWYgKGlucHV0IGluc3RhbmNlb2YgVXJsU2VhcmNoUGFyYW1zKSB7XG5cdFx0XHQvLyBDb3B5IHRoZSBpbmNvbWluZyBVcmxTZWFyY2hQYXJhbSdzIGludGVybmFsIGxpc3Rcblx0XHRcdGxpc3QgPSA8UGFyYW1MaXN0PiBkdXBsaWNhdGUoaW5wdXQuX2xpc3QpO1xuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHQvLyBDb3B5IHRoZSBpbmNvbWluZyBvYmplY3QsIGFzc3VtaW5nIGl0cyBwcm9wZXJ0eSB2YWx1ZXMgYXJlIGVpdGhlciBhcnJheXMgb3Igc3RyaW5nc1xuXHRcdFx0bGlzdCA9IHt9O1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gaW5wdXQpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSAoPFBhcmFtTGlzdD4gaW5wdXQpW2tleV07XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdFx0bGlzdFtrZXldID0gdmFsdWUubGVuZ3RoID8gdmFsdWUuc2xpY2UoKSA6IFsgJycgXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0bGlzdFtrZXldID0gWyAnJyBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGxpc3Rba2V5XSA9IFsgPHN0cmluZz4gdmFsdWUgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHQvLyBQYXJzZSB0aGUgaW5jb21pbmcgc3RyaW5nIGFzIGEgcXVlcnkgc3RyaW5nXG5cdFx0XHRsaXN0ID0gcGFyc2VRdWVyeVN0cmluZyhpbnB1dCk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0bGlzdCA9IHt9O1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2xpc3QnLCB7IHZhbHVlOiBsaXN0IH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1hcHMgcHJvcGVydHkga2V5cyB0byBhcnJheXMgb2YgdmFsdWVzLiBUaGUgdmFsdWUgZm9yIGFueSBwcm9wZXJ0eSB0aGF0IGhhcyBiZWVuIHNldCB3aWxsIGJlIGFuIGFycmF5IGNvbnRhaW5pbmdcblx0ICogYXQgbGVhc3Qgb25lIGl0ZW0uIFByb3BlcnRpZXMgdGhhdCBoYXZlIGJlZW4gZGVsZXRlZCB3aWxsIGhhdmUgYSB2YWx1ZSBvZiAndW5kZWZpbmVkJy5cblx0ICovXG5cdHByb3RlY3RlZCBfbGlzdDogSGFzaDxzdHJpbmdbXT47XG5cblx0LyoqXG5cdCAqIEFwcGVuZHMgYSBuZXcgdmFsdWUgdG8gdGhlIHNldCBvZiB2YWx1ZXMgZm9yIGEga2V5LlxuXHQgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gYWRkIGEgdmFsdWUgZm9yXG5cdCAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkXG5cdCAqL1xuXHRhcHBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuaGFzKGtleSkpIHtcblx0XHRcdHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuX2xpc3Rba2V5XS5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRGVsZXRlcyBhbGwgdmFsdWVzIGZvciBhIGtleS5cblx0ICogQHBhcmFtIGtleSBUaGUga2V5IHdob3NlIHZhbHVlcyBhcmUgdG8gYmUgcmVtb3ZlZFxuXHQgKi9cblx0ZGVsZXRlKGtleTogc3RyaW5nKTogdm9pZCB7XG5cdFx0Ly8gU2V0IHRvIHVuZGVmaW5lZCByYXRoZXIgdGhhbiBkZWxldGluZyB0aGUga2V5LCBmb3IgYmV0dGVyIGNvbnNpc3RlbmN5IGFjcm9zcyBicm93c2Vycy5cblx0XHQvLyBJZiBhIGRlbGV0ZWQga2V5IGlzIHJlLWFkZGVkLCBtb3N0IGJyb3dzZXJzIHB1dCBpdCBhdCB0aGUgZW5kIG9mIGl0ZXJhdGlvbiBvcmRlciwgYnV0IElFIG1haW50YWluc1xuXHRcdC8vIGl0cyBvcmlnaW5hbCBwb3NpdGlvbi4gIFRoaXMgYXBwcm9hY2ggbWFpbnRhaW5zIHRoZSBvcmlnaW5hbCBwb3NpdGlvbiBldmVyeXdoZXJlLlxuXHRcdHRoaXMuX2xpc3Rba2V5XSA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBrZXkuXG5cdCAqIEBwYXJhbSBrZXkgVGhlIGtleSB0byByZXR1cm4gdGhlIGZpcnN0IHZhbHVlIGZvclxuXHQgKiBAcmV0dXJuIFRoZSBmaXJzdCBzdHJpbmcgdmFsdWUgZm9yIHRoZSBrZXlcblx0ICovXG5cdGdldChrZXk6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0aWYgKCF0aGlzLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2xpc3Rba2V5XVswXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFsbCB0aGUgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCBhIGtleS5cblx0ICogQHBhcmFtIGtleSBUaGUga2V5IHRvIHJldHVybiBhbGwgdmFsdWVzIGZvclxuXHQgKiBAcmV0dXJuIEFuIGFycmF5IG9mIHN0cmluZ3MgY29udGFpbmluZyBhbGwgdmFsdWVzIGZvciB0aGUga2V5XG5cdCAqL1xuXHRnZXRBbGwoa2V5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG5cdFx0aWYgKCF0aGlzLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2xpc3Rba2V5XTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYSBrZXkgaGFzIGJlZW4gc2V0IHRvIGFueSB2YWx1ZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gdGVzdCBmb3IgZXhpc3RlbmNlXG5cdCAqIEByZXR1cm4gQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGtleSBoYXMgYmVlbiBzZXRcblx0ICovXG5cdGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMuX2xpc3Rba2V5XSk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwga2V5cyB3aGljaCBoYXZlIGJlZW4gc2V0LlxuXHQgKiBAcmV0dXJuIEFuIGFycmF5IG9mIHN0cmluZ3MgY29udGFpbmluZyBhbGwga2V5cyBzZXQgaW4gdGhlIFVybFNlYXJjaFBhcmFtcyBpbnN0YW5jZVxuXHQgKi9cblx0a2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0Y29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcblxuXHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2xpc3QpIHtcblx0XHRcdGlmICh0aGlzLmhhcyhrZXkpKSB7XG5cdFx0XHRcdGtleXMucHVzaChrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBrZXlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhIGtleS5cblx0ICogQHBhcmFtIGtleSBUaGUga2V5IHRvIHNldCB0aGUgdmFsdWUgb2Zcblx0ICovXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuX2xpc3Rba2V5XSA9IFsgdmFsdWUgXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoaXMgb2JqZWN0J3MgZGF0YSBhcyBhbiBlbmNvZGVkIHF1ZXJ5IHN0cmluZy5cblx0ICogQHJldHVybiBBIHN0cmluZyBpbiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgZm9ybWF0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBzZXQga2V5cy92YWx1ZXNcblx0ICovXG5cdHRvU3RyaW5nKCk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcXVlcnk6IHN0cmluZ1tdID0gW107XG5cblx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9saXN0KSB7XG5cdFx0XHRpZiAoIXRoaXMuaGFzKGtleSkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHZhbHVlcyA9IHRoaXMuX2xpc3Rba2V5XTtcblx0XHRcdGNvbnN0IGVuY29kZWRLZXkgPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcblx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG5cdFx0XHRcdHF1ZXJ5LnB1c2goZW5jb2RlZEtleSArICh2YWx1ZSA/ICgnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKSA6ICcnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHF1ZXJ5LmpvaW4oJyYnKTtcblx0fVxufVxuIl19