var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './global', './Symbol', './iterator', './decorators', './iterator'], factory);
    }
})(function (require, exports) {
    "use strict";
    var global_1 = require('./global');
    var Symbol_1 = require('./Symbol');
    var iterator_1 = require('./iterator');
    var decorators_1 = require('./decorators');
    var iterator_2 = require('./iterator');
    var Shim;
    (function (Shim) {
        var Set = (function () {
            function Set(iterable) {
                var _this = this;
                this._setData = [];
                this[Symbol_1.default.toStringTag] = 'Set';
                if (iterable) {
                    iterator_2.forOf(iterable, function (value) { return _this.add(value); });
                }
            }
            ;
            Set.prototype.add = function (value) {
                if (this.has(value)) {
                    return this;
                }
                this._setData.push(value);
                return this;
            };
            ;
            Set.prototype.clear = function () {
                this._setData.length = 0;
            };
            ;
            Set.prototype.delete = function (value) {
                var idx = this._setData.indexOf(value);
                if (idx === -1) {
                    return false;
                }
                this._setData.splice(idx, 1);
                return true;
            };
            ;
            Set.prototype.entries = function () {
                var ent = new iterator_1.ShimIterator(this._setData.map(function (value) { return [value, value]; }));
                ent[Symbol_1.default.iterator] = function () {
                    return ent;
                };
                return ent;
            };
            ;
            Set.prototype.forEach = function (callbackfn, thisArg) {
                var iterator = this.values();
                var result = iterator.next();
                while (!result.done) {
                    callbackfn.call(thisArg, result.value, result.value, this);
                    result = iterator.next();
                }
            };
            ;
            Set.prototype.has = function (value) {
                return this._setData.indexOf(value) > -1;
            };
            ;
            Set.prototype.keys = function () {
                var keys = new iterator_1.ShimIterator(this._setData);
                keys[Symbol_1.default.iterator] = function () {
                    return keys;
                };
                return keys;
            };
            ;
            Object.defineProperty(Set.prototype, "size", {
                get: function () {
                    return this._setData.length;
                },
                enumerable: true,
                configurable: true
            });
            ;
            Set.prototype.values = function () {
                var values = new iterator_1.ShimIterator(this._setData);
                values[Symbol_1.default.iterator] = function () {
                    return values;
                };
                return values;
            };
            ;
            Set.prototype[Symbol_1.default.iterator] = function () {
                var iterator = new iterator_1.ShimIterator(this._setData);
                iterator[Symbol_1.default.iterator] = function () {
                    return iterator;
                };
                return iterator;
            };
            ;
            return Set;
        }());
        Shim.Set = Set;
    })(Shim = exports.Shim || (exports.Shim = {}));
    var Set = (function () {
        /* istanbul ignore next */
        function Set(iterable) {
            /* istanbul ignore next */
            this[Symbol_1.default.toStringTag] = 'Set';
        }
        ;
        /* istanbul ignore next */
        Set.prototype.add = function (value) { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.clear = function () { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.delete = function (value) { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.entries = function () { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.forEach = function (callbackfn, thisArg) { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.has = function (value) { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype.keys = function () { throw new Error('Abstract method'); };
        ;
        Object.defineProperty(Set.prototype, "size", {
            /* istanbul ignore next */
            get: function () { throw new Error('Abstract method'); },
            enumerable: true,
            configurable: true
        });
        ;
        /* istanbul ignore next */
        Set.prototype.values = function () { throw new Error('Abstract method'); };
        ;
        /* istanbul ignore next */
        Set.prototype[Symbol_1.default.iterator] = function () { throw new Error('Abstract method'); };
        ;
        Set = __decorate([
            decorators_1.hasClass('es6-set', global_1.default.Set, Shim.Set)
        ], Set);
        return Set;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Set;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7SUFBQSx1QkFBbUIsVUFBVSxDQUFDLENBQUE7SUFDOUIsdUJBQW1CLFVBQVUsQ0FBQyxDQUFBO0lBQzlCLHlCQUF5RCxZQUFZLENBQUMsQ0FBQTtJQUN0RSwyQkFBeUIsY0FBYyxDQUFDLENBQUE7SUFDeEMseUJBQXNCLFlBQVksQ0FBQyxDQUFBO0lBRW5DLElBQWlCLElBQUksQ0FrRnBCO0lBbEZELFdBQWlCLElBQUksRUFBQyxDQUFDO1FBQ3RCO1lBR0MsYUFBWSxRQUFxQztnQkFIbEQsaUJBZ0ZDO2dCQS9FUSxhQUFRLEdBQVEsRUFBRSxDQUFDO2dCQThFM0IsS0FBQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXLEtBQUssQ0FBQztnQkEzRXBDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2QsZ0JBQUssQ0FBQyxRQUFRLEVBQUUsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDO1lBQ0YsQ0FBQzs7WUFFRCxpQkFBRyxHQUFILFVBQUksS0FBUTtnQkFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDYixDQUFDO2dCQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2IsQ0FBQzs7WUFFRCxtQkFBSyxHQUFMO2dCQUNDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUMxQixDQUFDOztZQUVELG9CQUFNLEdBQU4sVUFBTyxLQUFRO2dCQUNkLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNkLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2IsQ0FBQzs7WUFFRCxxQkFBTyxHQUFQO2dCQUNDLElBQU0sR0FBRyxHQUFHLElBQUksdUJBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRSxFQUFoQixDQUFnQixDQUFDLENBQUMsQ0FBQztnQkFDdEUsR0FBSSxDQUFDLGdCQUFNLENBQUMsUUFBUSxDQUFDLEdBQUc7b0JBQzlCLE1BQU0sQ0FBTyxHQUFHLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQztnQkFDRixNQUFNLENBQU8sR0FBRyxDQUFDO1lBQ2xCLENBQUM7O1lBRUQscUJBQU8sR0FBUCxVQUFRLFVBQXFELEVBQUUsT0FBYTtnQkFDM0UsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUMvQixJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ3JCLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDM0QsTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDMUIsQ0FBQztZQUNGLENBQUM7O1lBRUQsaUJBQUcsR0FBSCxVQUFJLEtBQVE7Z0JBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFDLENBQUM7O1lBRUQsa0JBQUksR0FBSjtnQkFDQyxJQUFNLElBQUksR0FBRyxJQUFJLHVCQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0QyxJQUFLLENBQUMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRztvQkFDL0IsTUFBTSxDQUFPLElBQUksQ0FBQztnQkFDbkIsQ0FBQyxDQUFDO2dCQUNGLE1BQU0sQ0FBTyxJQUFJLENBQUM7WUFDbkIsQ0FBQzs7WUFFRCxzQkFBSSxxQkFBSTtxQkFBUjtvQkFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQzdCLENBQUM7OztlQUFBOztZQUVELG9CQUFNLEdBQU47Z0JBQ0MsSUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDeEMsTUFBTyxDQUFDLGdCQUFNLENBQUMsUUFBUSxDQUFDLEdBQUc7b0JBQ2pDLE1BQU0sQ0FBTyxNQUFNLENBQUM7Z0JBQ3JCLENBQUMsQ0FBQztnQkFDRixNQUFNLENBQU8sTUFBTSxDQUFDO1lBQ3JCLENBQUM7O1lBRUQsY0FBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQjtnQkFDQyxJQUFNLFFBQVEsR0FBRyxJQUFJLHVCQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQyxRQUFTLENBQUMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRztvQkFDbkMsTUFBTSxDQUFPLFFBQVEsQ0FBQztnQkFDdkIsQ0FBQyxDQUFDO2dCQUNGLE1BQU0sQ0FBTyxRQUFRLENBQUM7WUFDdkIsQ0FBQzs7WUFHRixVQUFDO1FBQUQsQ0FBQyxBQWhGRCxJQWdGQztRQWhGWSxRQUFHLE1BZ0ZmLENBQUE7SUFDRixDQUFDLEVBbEZnQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFrRnBCO0lBR0Q7UUFDQywwQkFBMEI7UUFDMUIsYUFBWSxRQUFxQztZQXNCakQsMEJBQTBCO1lBQzFCLEtBQUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsR0FBVyxLQUFLLENBQUM7UUF2QmdCLENBQUM7O1FBRXRELDBCQUEwQjtRQUMxQixpQkFBRyxHQUFILFVBQUksS0FBUSxJQUFVLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQzNELDBCQUEwQjtRQUMxQixtQkFBSyxHQUFMLGNBQWdCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQ3JELDBCQUEwQjtRQUMxQixvQkFBTSxHQUFOLFVBQU8sS0FBUSxJQUFhLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQ2pFLDBCQUEwQjtRQUMxQixxQkFBTyxHQUFQLGNBQXNDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQzNFLDBCQUEwQjtRQUMxQixxQkFBTyxHQUFQLFVBQVEsVUFBcUQsRUFBRSxPQUFhLElBQVUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFDM0gsMEJBQTBCO1FBQzFCLGlCQUFHLEdBQUgsVUFBSSxLQUFRLElBQWEsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFDOUQsMEJBQTBCO1FBQzFCLGtCQUFJLEdBQUosY0FBOEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFFbkUsc0JBQUkscUJBQUk7WUFEUiwwQkFBMEI7aUJBQzFCLGNBQXFCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7OztXQUFBOztRQUMxRCwwQkFBMEI7UUFDMUIsb0JBQU0sR0FBTixjQUFnQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDOztRQUNyRSwwQkFBMEI7UUFDMUIsY0FBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQixjQUEyQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDOztRQXhCakY7WUFBQyxxQkFBUSxDQUFDLFNBQVMsRUFBRSxnQkFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDO2VBQUE7UUEyQjFDLFVBQUM7SUFBRCxDQUFDLEFBMUJELElBMEJDO0lBMUJEO3lCQTBCQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdsb2JhbCBmcm9tICcuL2dsb2JhbCc7XG5pbXBvcnQgU3ltYm9sIGZyb20gJy4vU3ltYm9sJztcbmltcG9ydCB7IEl0ZXJhYmxlSXRlcmF0b3IsIEl0ZXJhYmxlLCBTaGltSXRlcmF0b3IgfSBmcm9tICcuL2l0ZXJhdG9yJztcbmltcG9ydCB7IGhhc0NsYXNzIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCB7IGZvck9mIH0gZnJvbSAnLi9pdGVyYXRvcic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2hpbSB7XG5cdGV4cG9ydCBjbGFzcyBTZXQ8VD4ge1xuXHRcdHByaXZhdGUgX3NldERhdGE6IFRbXSA9IFtdO1xuXG5cdFx0Y29uc3RydWN0b3IoaXRlcmFibGU/OiBJdGVyYWJsZTxUPiB8IEFycmF5TGlrZTxUPikge1xuXHRcdFx0aWYgKGl0ZXJhYmxlKSB7XG5cdFx0XHRcdGZvck9mKGl0ZXJhYmxlLCAodmFsdWUpID0+IHRoaXMuYWRkKHZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGFkZCh2YWx1ZTogVCk6IHRoaXMge1xuXHRcdFx0aWYgKHRoaXMuaGFzKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHRcdHRoaXMuX3NldERhdGEucHVzaCh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0XHR0aGlzLl9zZXREYXRhLmxlbmd0aCA9IDA7XG5cdFx0fTtcblxuXHRcdGRlbGV0ZSh2YWx1ZTogVCk6IGJvb2xlYW4ge1xuXHRcdFx0Y29uc3QgaWR4ID0gdGhpcy5fc2V0RGF0YS5pbmRleE9mKHZhbHVlKTtcblx0XHRcdGlmIChpZHggPT09IC0xKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3NldERhdGEuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0ZW50cmllcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFtULCBUXT4ge1xuXHRcdFx0Y29uc3QgZW50ID0gbmV3IFNoaW1JdGVyYXRvcih0aGlzLl9zZXREYXRhLm1hcCgodmFsdWUpID0+IFsgdmFsdWUsIHZhbHVlIF0pKTtcblx0XHRcdCg8YW55PiBlbnQpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKTogSXRlcmFibGVJdGVyYXRvcjxbVCwgVF0+IHtcblx0XHRcdFx0cmV0dXJuIDxhbnk+IGVudDtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gPGFueT4gZW50O1xuXHRcdH07XG5cblx0XHRmb3JFYWNoKGNhbGxiYWNrZm46ICh2YWx1ZTogVCwgaW5kZXg6IFQsIHNldDogU2V0PFQ+KSA9PiB2b2lkLCB0aGlzQXJnPzogYW55KTogdm9pZCB7XG5cdFx0XHRjb25zdCBpdGVyYXRvciA9IHRoaXMudmFsdWVzKCk7XG5cdFx0XHRsZXQgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuXHRcdFx0d2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRjYWxsYmFja2ZuLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCByZXN1bHQudmFsdWUsIHRoaXMpO1xuXHRcdFx0XHRyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGhhcyh2YWx1ZTogVCk6IGJvb2xlYW4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3NldERhdGEuaW5kZXhPZih2YWx1ZSkgPiAtMTtcblx0XHR9O1xuXG5cdFx0a2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcblx0XHRcdGNvbnN0IGtleXMgPSBuZXcgU2hpbUl0ZXJhdG9yKHRoaXMuX3NldERhdGEpO1xuXHRcdFx0KDxhbnk+IGtleXMpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKTogSXRlcmFibGVJdGVyYXRvcjxUPiB7XG5cdFx0XHRcdHJldHVybiA8YW55PiBrZXlzO1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiA8YW55PiBrZXlzO1xuXHRcdH07XG5cblx0XHRnZXQgc2l6ZSgpOiBudW1iZXIge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3NldERhdGEubGVuZ3RoO1xuXHRcdH07XG5cblx0XHR2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxUPiB7XG5cdFx0XHRjb25zdCB2YWx1ZXMgPSBuZXcgU2hpbUl0ZXJhdG9yKHRoaXMuX3NldERhdGEpO1xuXHRcdFx0KDxhbnk+IHZhbHVlcylbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcblx0XHRcdFx0cmV0dXJuIDxhbnk+IHZhbHVlcztcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gPGFueT4gdmFsdWVzO1xuXHRcdH07XG5cblx0XHRbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcblx0XHRcdGNvbnN0IGl0ZXJhdG9yID0gbmV3IFNoaW1JdGVyYXRvcih0aGlzLl9zZXREYXRhKTtcblx0XHRcdCg8YW55PiBpdGVyYXRvcilbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcblx0XHRcdFx0cmV0dXJuIDxhbnk+IGl0ZXJhdG9yO1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiA8YW55PiBpdGVyYXRvcjtcblx0XHR9O1xuXG5cdFx0W1N5bWJvbC50b1N0cmluZ1RhZ106IHN0cmluZyA9ICdTZXQnO1xuXHR9XG59XG5cbkBoYXNDbGFzcygnZXM2LXNldCcsIGdsb2JhbC5TZXQsIFNoaW0uU2V0KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0PFQ+IHtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0Y29uc3RydWN0b3IoaXRlcmFibGU/OiBJdGVyYWJsZTxUPiB8IEFycmF5TGlrZTxUPikgeyB9O1xuXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGFkZCh2YWx1ZTogVCk6IHRoaXMgeyB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IG1ldGhvZCcpOyB9O1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRjbGVhcigpOiB2b2lkIHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ZGVsZXRlKHZhbHVlOiBUKTogYm9vbGVhbiB7IHRocm93IG5ldyBFcnJvcignQWJzdHJhY3QgbWV0aG9kJyk7IH07XG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGVudHJpZXMoKTogSXRlcmFibGVJdGVyYXRvcjxbVCwgVF0+IHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0Zm9yRWFjaChjYWxsYmFja2ZuOiAodmFsdWU6IFQsIGluZGV4OiBULCBzZXQ6IFNldDxUPikgPT4gdm9pZCwgdGhpc0FyZz86IGFueSk6IHZvaWQgeyB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IG1ldGhvZCcpOyB9O1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRoYXModmFsdWU6IFQpOiBib29sZWFuIHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0a2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0Z2V0IHNpemUoKTogbnVtYmVyIHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0dmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VD4geyB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IG1ldGhvZCcpOyB9O1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHsgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QnKTsgfTtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0W1N5bWJvbC50b1N0cmluZ1RhZ106IHN0cmluZyA9ICdTZXQnO1xufVxuIl19